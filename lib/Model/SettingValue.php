<?php
/**
 * SettingValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * configapi
 *
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SettingValue Class Doc Comment
 *
 * @category Class
 * @description Value of a setting
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SettingValue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SettingValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'config_setting_value_id' => 'string',
        'config_setting_definition_id' => 'string',
        'config_setting_value' => 'object',
        'config_setting_last_modified' => '\DateTime',
        'config_setting_name' => 'string',
        'config_setting_description' => 'string',
        'config_setting_tags' => 'string',
        'config_setting_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'config_setting_value_id' => null,
        'config_setting_definition_id' => null,
        'config_setting_value' => null,
        'config_setting_last_modified' => 'date-time',
        'config_setting_name' => null,
        'config_setting_description' => null,
        'config_setting_tags' => null,
        'config_setting_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'config_setting_value_id' => 'ConfigSettingValueID',
        'config_setting_definition_id' => 'ConfigSettingDefinitionID',
        'config_setting_value' => 'ConfigSettingValue',
        'config_setting_last_modified' => 'ConfigSettingLastModified',
        'config_setting_name' => 'ConfigSettingName',
        'config_setting_description' => 'ConfigSettingDescription',
        'config_setting_tags' => 'ConfigSettingTags',
        'config_setting_type' => 'ConfigSettingType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'config_setting_value_id' => 'setConfigSettingValueId',
        'config_setting_definition_id' => 'setConfigSettingDefinitionId',
        'config_setting_value' => 'setConfigSettingValue',
        'config_setting_last_modified' => 'setConfigSettingLastModified',
        'config_setting_name' => 'setConfigSettingName',
        'config_setting_description' => 'setConfigSettingDescription',
        'config_setting_tags' => 'setConfigSettingTags',
        'config_setting_type' => 'setConfigSettingType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'config_setting_value_id' => 'getConfigSettingValueId',
        'config_setting_definition_id' => 'getConfigSettingDefinitionId',
        'config_setting_value' => 'getConfigSettingValue',
        'config_setting_last_modified' => 'getConfigSettingLastModified',
        'config_setting_name' => 'getConfigSettingName',
        'config_setting_description' => 'getConfigSettingDescription',
        'config_setting_tags' => 'getConfigSettingTags',
        'config_setting_type' => 'getConfigSettingType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['config_setting_value_id'] = isset($data['config_setting_value_id']) ? $data['config_setting_value_id'] : null;
        $this->container['config_setting_definition_id'] = isset($data['config_setting_definition_id']) ? $data['config_setting_definition_id'] : null;
        $this->container['config_setting_value'] = isset($data['config_setting_value']) ? $data['config_setting_value'] : null;
        $this->container['config_setting_last_modified'] = isset($data['config_setting_last_modified']) ? $data['config_setting_last_modified'] : null;
        $this->container['config_setting_name'] = isset($data['config_setting_name']) ? $data['config_setting_name'] : null;
        $this->container['config_setting_description'] = isset($data['config_setting_description']) ? $data['config_setting_description'] : null;
        $this->container['config_setting_tags'] = isset($data['config_setting_tags']) ? $data['config_setting_tags'] : null;
        $this->container['config_setting_type'] = isset($data['config_setting_type']) ? $data['config_setting_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets config_setting_value_id
     *
     * @return string
     */
    public function getConfigSettingValueId()
    {
        return $this->container['config_setting_value_id'];
    }

    /**
     * Sets config_setting_value_id
     *
     * @param string $config_setting_value_id The ID of the setting value
     *
     * @return $this
     */
    public function setConfigSettingValueId($config_setting_value_id)
    {
        $this->container['config_setting_value_id'] = $config_setting_value_id;

        return $this;
    }

    /**
     * Gets config_setting_definition_id
     *
     * @return string
     */
    public function getConfigSettingDefinitionId()
    {
        return $this->container['config_setting_definition_id'];
    }

    /**
     * Sets config_setting_definition_id
     *
     * @param string $config_setting_definition_id The ID of the definition of the setting
     *
     * @return $this
     */
    public function setConfigSettingDefinitionId($config_setting_definition_id)
    {
        $this->container['config_setting_definition_id'] = $config_setting_definition_id;

        return $this;
    }

    /**
     * Gets config_setting_value
     *
     * @return object
     */
    public function getConfigSettingValue()
    {
        return $this->container['config_setting_value'];
    }

    /**
     * Sets config_setting_value
     *
     * @param object $config_setting_value The value of the setting
     *
     * @return $this
     */
    public function setConfigSettingValue($config_setting_value)
    {
        $this->container['config_setting_value'] = $config_setting_value;

        return $this;
    }

    /**
     * Gets config_setting_last_modified
     *
     * @return \DateTime
     */
    public function getConfigSettingLastModified()
    {
        return $this->container['config_setting_last_modified'];
    }

    /**
     * Sets config_setting_last_modified
     *
     * @param \DateTime $config_setting_last_modified The last modified date of the setting
     *
     * @return $this
     */
    public function setConfigSettingLastModified($config_setting_last_modified)
    {
        $this->container['config_setting_last_modified'] = $config_setting_last_modified;

        return $this;
    }

    /**
     * Gets config_setting_name
     *
     * @return string
     */
    public function getConfigSettingName()
    {
        return $this->container['config_setting_name'];
    }

    /**
     * Sets config_setting_name
     *
     * @param string $config_setting_name Name of the setting
     *
     * @return $this
     */
    public function setConfigSettingName($config_setting_name)
    {
        $this->container['config_setting_name'] = $config_setting_name;

        return $this;
    }

    /**
     * Gets config_setting_description
     *
     * @return string
     */
    public function getConfigSettingDescription()
    {
        return $this->container['config_setting_description'];
    }

    /**
     * Sets config_setting_description
     *
     * @param string $config_setting_description Description of the setting
     *
     * @return $this
     */
    public function setConfigSettingDescription($config_setting_description)
    {
        $this->container['config_setting_description'] = $config_setting_description;

        return $this;
    }

    /**
     * Gets config_setting_tags
     *
     * @return string
     */
    public function getConfigSettingTags()
    {
        return $this->container['config_setting_tags'];
    }

    /**
     * Sets config_setting_tags
     *
     * @param string $config_setting_tags Setting tags
     *
     * @return $this
     */
    public function setConfigSettingTags($config_setting_tags)
    {
        $this->container['config_setting_tags'] = $config_setting_tags;

        return $this;
    }

    /**
     * Gets config_setting_type
     *
     * @return string
     */
    public function getConfigSettingType()
    {
        return $this->container['config_setting_type'];
    }

    /**
     * Sets config_setting_type
     *
     * @param string $config_setting_type Possible values are: STRING, JSON
     *
     * @return $this
     */
    public function setConfigSettingType($config_setting_type)
    {
        $this->container['config_setting_type'] = $config_setting_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


