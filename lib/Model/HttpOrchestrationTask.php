<?php
/**
 * HttpOrchestrationTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * configapi
 *
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HttpOrchestrationTask Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HttpOrchestrationTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HttpOrchestrationTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_name' => 'string',
        'http_method' => 'string',
        'url' => 'string',
        'http_headers' => '\Swagger\Client\Model\HttpOrchestrationHeader[]',
        'query_parameters' => '\Swagger\Client\Model\HttpGetParameter[]',
        'form_data_parameters' => '\Swagger\Client\Model\HttpFormDataParameter[]',
        'www_form_url_encoded_parameters' => '\Swagger\Client\Model\HttpWwwFormUrlEncodedParameter[]',
        'raw_text_body' => '\Swagger\Client\Model\HttpRawTextParameter',
        'raw_binary_body' => '\Swagger\Client\Model\HttpRawBinaryParameter'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_name' => null,
        'http_method' => null,
        'url' => null,
        'http_headers' => null,
        'query_parameters' => null,
        'form_data_parameters' => null,
        'www_form_url_encoded_parameters' => null,
        'raw_text_body' => null,
        'raw_binary_body' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_name' => 'TaskName',
        'http_method' => 'HttpMethod',
        'url' => 'URL',
        'http_headers' => 'HttpHeaders',
        'query_parameters' => 'QueryParameters',
        'form_data_parameters' => 'FormDataParameters',
        'www_form_url_encoded_parameters' => 'WwwFormUrlEncodedParameters',
        'raw_text_body' => 'RawTextBody',
        'raw_binary_body' => 'RawBinaryBody'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_name' => 'setTaskName',
        'http_method' => 'setHttpMethod',
        'url' => 'setUrl',
        'http_headers' => 'setHttpHeaders',
        'query_parameters' => 'setQueryParameters',
        'form_data_parameters' => 'setFormDataParameters',
        'www_form_url_encoded_parameters' => 'setWwwFormUrlEncodedParameters',
        'raw_text_body' => 'setRawTextBody',
        'raw_binary_body' => 'setRawBinaryBody'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_name' => 'getTaskName',
        'http_method' => 'getHttpMethod',
        'url' => 'getUrl',
        'http_headers' => 'getHttpHeaders',
        'query_parameters' => 'getQueryParameters',
        'form_data_parameters' => 'getFormDataParameters',
        'www_form_url_encoded_parameters' => 'getWwwFormUrlEncodedParameters',
        'raw_text_body' => 'getRawTextBody',
        'raw_binary_body' => 'getRawBinaryBody'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['http_method'] = isset($data['http_method']) ? $data['http_method'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['http_headers'] = isset($data['http_headers']) ? $data['http_headers'] : null;
        $this->container['query_parameters'] = isset($data['query_parameters']) ? $data['query_parameters'] : null;
        $this->container['form_data_parameters'] = isset($data['form_data_parameters']) ? $data['form_data_parameters'] : null;
        $this->container['www_form_url_encoded_parameters'] = isset($data['www_form_url_encoded_parameters']) ? $data['www_form_url_encoded_parameters'] : null;
        $this->container['raw_text_body'] = isset($data['raw_text_body']) ? $data['raw_text_body'] : null;
        $this->container['raw_binary_body'] = isset($data['raw_binary_body']) ? $data['raw_binary_body'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name An identifier for this task name, e.g. CreateCustomer or ScanForVirus; allows you to refer to this task from other tasks; if not supplied, it will default to a 0-based integer index of the task
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets http_method
     *
     * @return string
     */
    public function getHttpMethod()
    {
        return $this->container['http_method'];
    }

    /**
     * Sets http_method
     *
     * @param string $http_method HTTP Method, e.g. GET, PUT, POST, etc.
     *
     * @return $this
     */
    public function setHttpMethod($http_method)
    {
        $this->container['http_method'] = $http_method;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url HTTP URL to orchestrate
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets http_headers
     *
     * @return \Swagger\Client\Model\HttpOrchestrationHeader[]
     */
    public function getHttpHeaders()
    {
        return $this->container['http_headers'];
    }

    /**
     * Sets http_headers
     *
     * @param \Swagger\Client\Model\HttpOrchestrationHeader[] $http_headers Optional; HTTP headers to apply to the request
     *
     * @return $this
     */
    public function setHttpHeaders($http_headers)
    {
        $this->container['http_headers'] = $http_headers;

        return $this;
    }

    /**
     * Gets query_parameters
     *
     * @return \Swagger\Client\Model\HttpGetParameter[]
     */
    public function getQueryParameters()
    {
        return $this->container['query_parameters'];
    }

    /**
     * Sets query_parameters
     *
     * @param \Swagger\Client\Model\HttpGetParameter[] $query_parameters Optional; query parameters, these query parameters will be incorporated into the URL
     *
     * @return $this
     */
    public function setQueryParameters($query_parameters)
    {
        $this->container['query_parameters'] = $query_parameters;

        return $this;
    }

    /**
     * Gets form_data_parameters
     *
     * @return \Swagger\Client\Model\HttpFormDataParameter[]
     */
    public function getFormDataParameters()
    {
        return $this->container['form_data_parameters'];
    }

    /**
     * Sets form_data_parameters
     *
     * @param \Swagger\Client\Model\HttpFormDataParameter[] $form_data_parameters Optional; FormData parameters, these parameters will be stored in the body in a multi-part encoding
     *
     * @return $this
     */
    public function setFormDataParameters($form_data_parameters)
    {
        $this->container['form_data_parameters'] = $form_data_parameters;

        return $this;
    }

    /**
     * Gets www_form_url_encoded_parameters
     *
     * @return \Swagger\Client\Model\HttpWwwFormUrlEncodedParameter[]
     */
    public function getWwwFormUrlEncodedParameters()
    {
        return $this->container['www_form_url_encoded_parameters'];
    }

    /**
     * Sets www_form_url_encoded_parameters
     *
     * @param \Swagger\Client\Model\HttpWwwFormUrlEncodedParameter[] $www_form_url_encoded_parameters Optional; x-www-form-urlencoded paramereters, these parameters will be stored in the body as an application/x-www-form-urlencoded encoding
     *
     * @return $this
     */
    public function setWwwFormUrlEncodedParameters($www_form_url_encoded_parameters)
    {
        $this->container['www_form_url_encoded_parameters'] = $www_form_url_encoded_parameters;

        return $this;
    }

    /**
     * Gets raw_text_body
     *
     * @return \Swagger\Client\Model\HttpRawTextParameter
     */
    public function getRawTextBody()
    {
        return $this->container['raw_text_body'];
    }

    /**
     * Sets raw_text_body
     *
     * @param \Swagger\Client\Model\HttpRawTextParameter $raw_text_body Optional; sets the body of the request as raw text, cannot be used with other parameter types in the same request
     *
     * @return $this
     */
    public function setRawTextBody($raw_text_body)
    {
        $this->container['raw_text_body'] = $raw_text_body;

        return $this;
    }

    /**
     * Gets raw_binary_body
     *
     * @return \Swagger\Client\Model\HttpRawBinaryParameter
     */
    public function getRawBinaryBody()
    {
        return $this->container['raw_binary_body'];
    }

    /**
     * Sets raw_binary_body
     *
     * @param \Swagger\Client\Model\HttpRawBinaryParameter $raw_binary_body Optional; set the body of the request as binary, cannot be used with other parameter types in the same request
     *
     * @return $this
     */
    public function setRawBinaryBody($raw_binary_body)
    {
        $this->container['raw_binary_body'] = $raw_binary_body;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


